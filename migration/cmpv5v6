#! /usr/bin/env python

"""\
Usage: %prog <gridv5.dat> <gridv6.dat>

Compare two dumped grids of PDF xf(x,Q) values. The two input files should be in
a format where each line has three numerical values separated by whitespace,
corresponding to the x, Q2, and xf(x,Q) values sampled. The x and Q values must
be line-by-line identical (within floating point accuracy) between the two data
files. The output files from the migration/testpdf program are the main use case.

Both input data sets are given by lines in the following format:

  x Q xfx

Where xfx is the central value for the top quark given by the set used in v5 and v6.

Program assumes the values produced by v5 are accurate and compares these to values
produced by v6.

Output is given in the following format:

  x Q fractional_accuracy
"""

from __future__ import print_function
import os, sys


## Parse command-line arguments
import argparse
ap = argparse.ArgumentParser(usage=__doc__)
ap.add_argument("DATFILES", nargs="+")
ap.add_argument("-o", dest="OUTPUT", metavar="FILE", help="output file", default="accuracy.dat")
ap.add_argument("-c", dest="CUTOFF", metavar="VAL", help="scale below which small deviations are not considered important", type=float, default=None)
ap.add_argument("-t", dest="TARGET", metavar="ACC", help="nominal target scale for accuracy, above which a warning will be written to stdout", type=float, default=1e-3)
ap.add_argument("-T", dest="TOLERANCE", metavar="TOL", help="tolerance scale for accuracy above which a warning will be written to stdout", type=float, default=0.1)
ap.add_argument("--as", dest="TYPE", metavar="TYPE", help="alpha_s comparison mode", action="store_const", const="as", default="xf")
ap.add_argument("-q", dest="VERBOSITY", help="be quiet", action="store_const", const=0, default=1)
ap.add_argument("-v", dest="VERBOSITY", help="be verbose", action="store_const", const=2, default=1)
args = ap.parse_args()


## Use different epsilon regulariser defaults for xf and alpha_s comparisons
if args.CUTOFF is None:
    if args.TYPE == "xf":
        args.CUTOFF = 0.05
    elif args.TYPE == "as":
        args.CUTOFF = 0.05

if len(args.DATFILES) != 2 or not all(os.path.exists(a) for a in args.DATFILES):
    print("Wrong args = '%s'" % " ".join(args.DATFILES))
    sys.exit(1)
#print "Comparing", args.DATFILES[0], args.DATFILES[1]

f5 = open(args.DATFILES[0])
f6 = open(args.DATFILES[1])
out = open(args.OUTPUT, "w")

def diff(a, b):
    return abs(a-b)
def fracdiff(a, b):
    if a == 0 and b == 0: return 0.0
    return abs(a-b) / max(abs(a), abs(b))
def accuracy(ref, test, epsilon=args.CUTOFF/args.TARGET):
    if ref == 0 and test == 0: return 0.0
    ## First defn
    #return abs((test + epsilon) / (ref + epsilon)) - 1.0
    ## Refined defn
    return abs(test - ref) / ( abs(ref) + epsilon )

## Counters for the accuracy thresholds failed (first is an overall counter)
failcounts = { -1 : 0, 1e-3 : 0,  1e-2 : 0, 1e-1 : 0, 1.0 : 0 }

while True:
    l5, l6 = f5.readline(), f6.readline()
    if not l5 or not l6:
        break
    ## PDF value comparisons
    if args.TYPE == "xf":
        lnx5, lnq5, xf5 = [float(a) for a in l5.split()]
        lnx6, lnq6, xf6 = [float(b) for b in l6.split()]
        assert fracdiff(lnx5, lnx6) < 1e-8 and fracdiff(lnq5, lnq6) < 1e-8
        diff56, acc56 = diff(xf5, xf6), accuracy(xf5, xf6)
        #out.write("%0.3e %0.3e %0.3e\n" % (lnx5, lnq5, diff56))
        out.write("%0.3e %0.3e %0.3e\n" % (lnx5, lnq5, acc56))
        if args.VERBOSITY == 2 or (args.VERBOSITY == 1 and acc56 > args.TOLERANCE):
            print("%0.3e, %0.3e:   %0.3e vs. %0.3e   =   %0.3e, %0.3e   =>   %s" % \
                  (lnx5, lnq5, xf5, xf6, diff56, acc56, "PASS" if acc56 < args.TOLERANCE else "FAIL"))
    ## alpha_s comparisons
    elif args.TYPE == "as":
        lnq5, as5 = [float(a) for a in l5.split()]
        lnq6, as6 = [float(b) for b in l6.split()]
        assert fracdiff(lnq5, lnq6) < 1e-8
        diff56, acc56 = diff(as5, as6), accuracy(as5, as6)
        out.write("%0.3e %0.3e\n" % (lnq5, acc56))
        if args.VERBOSITY == 2 or (args.VERBOSITY == 1 and acc56 > args.TOLERANCE):
            print("%0.3e:   %0.3e vs. %0.3e   =   %0.3e, %0.3e   =>   %s" % \
                  (lnq5, as5, as6, diff56, acc56, "PASS" if acc56 < args.TOLERANCE else "FAIL"))
    ## Update accuracy threshold failure filters
    for acc_cut in failcounts:
        if acc56 > acc_cut:
            failcounts[acc_cut] += 1

## Print out threshold failure rates
#print failcounts
for acc_cut in sorted(failcounts.keys())[1:]:
    failrate = failcounts[acc_cut] / float(failcounts[-1])
    if failrate and (acc_cut > 5e-3 or args.VERBOSITY == 2 or failrate > 1e-2):
        print("%0.1f%% of points fail acc < %0.1e cut in print %s vs %s" % \
              (100*failrate, acc_cut, args.DATFILES[0], args.DATFILES[1]))
