#! /usr/bin/env python

"""\
Usage: %prog <setname> [<setname2> ...]

The set names given are in the format required for initialisation in LHAPDF5, e.g.

  MSTW2008lo90cl_nf3.LHgrid, MSTW2008lo90cl.LHgrid, NNPDF23_nlo_as_0119.LHgrid,
  CT10.LHgrid, cteq66.LHgrid, cteq6ll.LHpdf, cteq6ll.LHgrid, ...

It's also possible to rename sets from the LHAPDF5 name to a new LHAPDF6 name, e.g.

  cteq6ll.LHpdf:CTEQ6L1 or cteq6ll.LHgrid:CTEQ6L1


TODO:
  * Force PDF behaviour toward x = 1... and Q = 0?
"""

from __future__ import print_function

## Parse the command line to get the set names for migration (in LHAPDF5 format)
import argparse
ap = argparse.ArgumentParser(usage=__doc__)
ap.add_argument("LHA5NAMES", nargs="+")
ap.add_argument("--desc", dest="META_SETDESC", metavar="DESC", help="a value for the SetDesc metadata field", default="")
ap.add_argument("--note", dest="META_NOTE", metavar="NOTE", help="a value for the Note metadata field", default="")
ap.add_argument("--authors", dest="META_AUTHORS", metavar="AUTHORS", help="a value for the Authors metadata field", default="")
ap.add_argument("--ref", dest="META_REFERENCE", metavar="REF", help="a value for the Reference metadata field", default="")
ap.add_argument("--version", dest="META_DATAVERSION", metavar="VERSION", help="a value for the DataVersion metadata field", type=int, default=-1)
ap.add_argument("--id", dest="META_LHAPDFID", metavar="LHAPDFID", help="a value for the SetIndex metadata field", type=int, default=None)
ap.add_argument("--pid", dest="META_PARTICLEID", metavar="PARTICLEID", help="a value for the Particle metadata field. Defaults to 2212 (proton)", type=int, default=2212)
ap.add_argument("--errtype", dest="META_ERRTYPE", metavar="TYPE", help="a value for the ErrorType metadata field", default="")
ap.add_argument("--pdftype", dest="META_PDFTYPE", help="the PdfType field value for members other than 0. Defaults to 'error' unless --errtype=replicas", default="")
ap.add_argument("--cl", dest="META_CONFLEVEL", metavar="CONFLEVEL", help="a value for the ErrorConfLevel metadata field", default="")
ap.add_argument("--xmin", dest="XMIN", metavar="X", help="set flag and truncate the x knots array at X, even if the PDF reports knots lower than that", type=float, default=None)
ap.add_argument("--qmin", dest="QMIN", metavar="Q", help="set flag and truncate the Q knots array at Q, even if the PDF reports knots lower than that", type=float, default=None)
ap.add_argument("--qmax", dest="QMAX", metavar="Q", help="set flag and truncate the Q knots array at Q, even if the PDF reports knots higher than that", type=float, default=None)
ap.add_argument("--xsfile", dest="XSFILE", metavar="FILE", help="file of sample knots in x", default=None)
ap.add_argument("--qsfile", dest="QSFILE", metavar="FILE", help="file of sample knots in Q", default=None)
ap.add_argument("--extraxs", dest="EXTRAXS", metavar="X1,X2,...", help="comma-separated list of extra sample knots in x", default=None)
ap.add_argument("--extraqs", dest="EXTRAQS", metavar="Q1,Q2,...", help="comma-separated list of extra sample knots in Q", default=None)
ap.add_argument("--resample", dest="RESAMPLE", action="store_true", help="override the original sample grid with a new one (hard coded)", default=False)
ap.add_argument("--resample-alphas", dest="RESAMPLE_ALPHAS", action="store_true", help="override the original alpha_s(Q) sample grid with a new one (hard coded)", default=False)
ap.add_argument("--ffn", dest="FIXED_NF", action="store_true", help="specify a fixed number of flavours [default=variable NF]", default=False)
ap.add_argument("--nf", dest="NUM_FLAVS", type=int, help="specify the number of flavours [default=%default]", default=5)
ap.add_argument("--top", dest="NUM_FLAVS", action="store_const", const=6, help="generate explicit grid entries for top (and antitop) PDFs", default=5)
ap.add_argument("--no-lambda", dest="NO_LAMBDA", action="store_true", help="don't write Lambda4,5 metadata values, even if they are non-zero", default=False)
ap.add_argument("--diffasmass", dest="DIFFASMASS", action="store_true", help="different alpha_s and quark masses for each member", default=False)
ap.add_argument("--subgrids", dest="USE_SUBGRIDS", action="store_true", help="make distinct xf and alpha_s ipol grids between flavour thresholds", default=False)
ap.add_argument("--info-only", dest="INFO_ONLY", action="store_true", help="only dump the .info file", default=False)
ap.add_argument("--central-only", dest="CENTRAL_ONLY", action="store_true", help="only dump the first member", default=False)
ap.add_argument("--force-num-mems", dest="FORCE_NUMMEMS", metavar="N", type=int, help="ignore the reported numberPDF and dump members from 0..N-1", default=None)
ap.add_argument("--force-pos", dest="FORCE_POSITIVE", action="store_const", const=1, help="forces any interpolation/extrapolation on this grid to return positive (>= 0) values", default=0)
ap.add_argument("--force-posdef", dest="FORCE_POSITIVE", action="store_const", const=2, help="forces any interpolation/extrapolation on this grid to return positive definite (>= 1e-10) values", default=0)
ap.add_argument("-v", "--verbose", dest="VERBOSE", action="store_true", help="verbose output", default=False)
ap.add_argument("-o", "--outdir", metavar="DIR", dest="OUTDIR", help="directory into which output set dirs should be written", default=".")
ap.add_argument("--resphoton", dest="RESPHOTON", action="store_true", help="query for a resolved photon PDF at P2=0", default=False)
args = ap.parse_args()

import os, sys
import lhapdf, numpy, math

## Standard Z mass in GeV
MZ = 91.1876

## For every PDF set
for lha5name in args.LHA5NAMES:

    ## Given names can be in the format lhapdf5name:lhapdf6name for easy set renaming
    if ":" in lha5name:
        setname = lha5name.split(":")[1]
        lha5name = lha5name.split(":")[0]
    else:
        setname = os.path.splitext(lha5name)[0]
    print("Migrating %s -> %s" % (lha5name, setname))
    outdir = os.path.join(args.OUTDIR, setname)

    ## Create output dir if needed, otherwise update the dir timestamp for convenience
    if not os.path.exists(setname):
        os.mkdir(outdir)
    else:
        os.utime(outdir, None)

    ## Initialize LHAPDF for this set
    lhapdf.initPDFSetByName(lha5name)

    ## Get the number of members in the PDF
    numMembers = lhapdf.numberPDF() + 1
    if lhapdf.numberPDF() == 1:
       numMembers -= 1

    ## Perhaps override the automatically determined numberPDF
    if args.FORCE_NUMMEMS is not None:
        numMembers = args.FORCE_NUMMEMS

    ## Choose the default non-central PDF type
    if not args.META_PDFTYPE:
        args.META_PDFTYPE = "replica" if args.META_ERRTYPE == "replicas" else "error"
        # ## If args.DIFFASMASS is set, then usually every member set is "central" rather than "error".
        # if args.DIFFASMASS:
        #     args.META_PDFTYPE = "central"

    ## Determine the active flavors
    # TODO: Re-order this list as e.g. [0, 1, -1, 2, -2, 3, -3, 4 -4, 5, -5]
    pids = [n for n in xrange(-args.NUM_FLAVS, args.NUM_FLAVS+1) if n != 0]
    pids.append(21)
    if lhapdf.hasPhoton():
        pids.append(22)
    print("PIDs:", pids)

    ## This will be filled with the set's Q anchors for alpha_s ipol
    alphas_qs = None

    ## Iterate over each member in the set
    for member in xrange(numMembers):
        print("Converting member #%d" % member)
        lhapdf.initPDF(member)

        ## Find the x and Q range extremes
        xmin = lhapdf.getXmin(1) if args.XMIN is None else args.XMIN
        xmax = 1.0 # this one is a given!
        qmin = math.sqrt(lhapdf.getQ2min(1)) if args.QMIN is None else args.QMIN
        qmax = math.sqrt(lhapdf.getQ2max(1)) if args.QMAX is None else args.QMAX

        ## Get the x and Q anchor point arrays
        if not args.RESAMPLE:
            ## Use LHAPDF5 to get the exact x and q2 grid points (requires LHAPDF 5.9)
            import ctypes
            try:
                _lha = ctypes.CDLL('libLHAPDF.so')
            except:
                _lha = ctypes.CDLL('libLHAPDF.dylib')
            nxgrid = ctypes.c_uint()
            nqgrid = ctypes.c_uint()
            gridx = (ctypes.c_double * 500)()
            gridq = (ctypes.c_double * 500)()
            _lha.getgrid_(ctypes.byref(nxgrid), ctypes.byref(nqgrid), gridx, gridq)
            xs, q2s = gridx[:nxgrid.value], gridq[:nqgrid.value]
            if not xs or not q2s:
                raise Exception("x or Q2 grids not extracted from original PDF")
            qs = list(numpy.sqrt(numpy.array(q2s)))
            del q2s
            #print xs
        else:
            print("Overriding original grid with a new log-lin x sampling and log Q sampling")
            # xs = list(numpy.logspace(math.log10(xmin), math.log10(0.05), 40)) + list(numpy.linspace(0.075, 0.2, 6)) + list(numpy.linspace(0.25, 1.0, 18))
            # xs = list(numpy.logspace(math.log10(xmin), math.log10(0.05), 40)) + list(numpy.logspace(math.log10(0.075), 0, 21))
            # xs = sorted(list(numpy.logspace(math.log10(xmin), 0, 70)) + [1.0 - i for i in numpy.logspace(math.log10(0.002), math.log10(0.1), 18)])
            xs = sorted(list(numpy.logspace(math.log10(xmin), 0, 70)) + list(numpy.linspace(0.1, 0.99, 50)))
            qs = [qmin] + list(numpy.logspace(math.log10(qmin), math.log10(qmax), 100))[1:-1] + [qmax] # dense resampling in logQ between Qmin and Qmax (with care re. exact endpoints)
            print("Manual x grid: ", ", ".join("%0.2g" % x for x in xs))
            print("Manual Q grid: ", ", ".join("%0.2g" % q for q in qs))

        ## If a file of x knots is provided, override whatever was calculated before
        if args.XSFILE:
            xs = []
            f = open(args.XSFILE)
            for l in f:
                xs += [float(sx) for sx in l.split()]
            xs.sort()
            if member == 0:
                print("Overriding x knots with:", ["%4.2g" % x for x in xs])
        ## Same for Qs from override file
        if args.QSFILE:
            qs = []
            f = open(args.QSFILE)
            for l in f:
                qs += [float(sq) for sq in l.split()]
            qs.sort()
            if member == 0:
                print("Overriding Q knots with:", ["%4.2g" % q for q in qs])

        def fuzzyeq(a, b, tol=1e-6):
            if a == b:
                return True
            return 2*abs(a-b)/(abs(a)+abs(b)) < tol

        ## Tidy the x knots array
        ## Fill in extra x sampling points if manually specified
        if args.EXTRAXS:
            extraxs = [float(x) for x in args.EXTRAXS.split(",")]
            xs = sorted(xs + extraxs)
        ## Remove x == 0 points: they screw up the ipol/xpol separation
        if xs[0] == 0.0:
            del xs[0]
        ## Remove other grid points below xmin, and add xmin as the lowest point
        if xmin:
            while xs[0] < xmin:
                del xs[0]
            if not fuzzyeq(xs[0], xmin):
                xs.insert(0, xmin)
        ## If there isn't an x = 1 point, create one
        if xmax and not fuzzyeq(xs[-1], xmax):
            xs.append(xmax)
        ## Debug printout
        if args.VERBOSE:
            print("x grid: ", ", ".join("%0.2g" % x for x in xs))

        ## Tidy the Q knots array
        ## Fill in extra Q sampling points if manually specified
        if args.EXTRAQS:
            extraqs = [float(q) for q in args.EXTRAQS.split(",")]
            qs = sorted(qs + extraqs)
        ## Remove grid points beyond qmin/max, and add qmin/max as the lowest and highest points
        if qmin:
            while qs[0] < qmin:
                del qs[0]
            if not fuzzyeq(qs[0], qmin):
                qs.insert(0, qmin)
        if qmax:
            while qs[-1] > qmax:
                del qs[-1]
            if not fuzzyeq(qs[-1], qmax):
                qs.append(qmax)
        ## Debug printout
        if args.VERBOSE:
            print("Q grid: ", ", ".join("%0.2g" % q for q in qs))


        ## Re-obtain the x and Q extrema values from the grids, just in case. Sometimes LHAPDF5 lies...
        xmin = xs[0]
        qmin = qs[0]
        qmax = qs[-1]
        # print "x = [%0.2g, %0.2g], Q = [%0.2g, %0.2g]" % (xmin, xmax, qmin, qmax)
        if not xmin or not xmax or not qmin or not qmax:
            print("WARNING: x and/or Q limits not correctly obtained")


        ## Detect and assign Q interpolation subgrids (use a single subgrid if there are no subgrids)
        qgrids = []
        split_points = []
        if args.USE_SUBGRIDS:
            ## Find Q knots with only tiny separations:
            for iq in xrange(len(qs)-1):
                if qs[iq+1] - qs[iq] < 1e-3:
                    if args.VERBOSE:
                        print("Flavour threshold detected by tiny Q grid knot separation:", qs[iq], "->", qs[iq+1], "GeV")
                    split_points.append(iq)
        # TODO: Check that the split points correspond to flavour thresholds?

        ## Actually split the subgrids
        split_points.insert(0, 0) # add a start-at-first marker
        split_points.append(None) # add an end-at-last marker
        for isplit in xrange(len(split_points)-1):
            start = split_points[isplit]
            # if isplit > 0:
            #     start += 1 # start from the +epsilon point
            end = split_points[isplit+1]
            if end is not None:
                end += 1 # want to include the split point knot, so increment unless it's the last one
            if args.VERBOSE:
                print("Subgrid from Q =", qs[start], "to", qs[end-1 if end is not None else -1])
            qgrid = qs[start:end]
            if isplit > 0:
                del qgrid[1] # remove the mq+epsilon knot since we don't want gaps in Q coverage
            qgrids.append(qgrid)
        if args.VERBOSE or len(qgrids) > 1:
            print("Number of Q subgrids = %d" % len(qgrids))

        if len(qgrids) > 1:
            ## Offset subgrid boundaries at flavour thresholds for later alpha_s sampling
            alphas_qs_offset = qs
            for iq in xrange(len(alphas_qs_offset)-1):
                if alphas_qs_offset[iq+1] - alphas_qs_offset[iq] < 1e-3:
                    alphas_qs_offset[iq+1] += 1e-10
                    alphas_qs_offset[iq] -= 1e-10

        ## Remove the Qs array, since using it now would be inconsistent
        del qs

        ## Use the PDF grid's Q knot values for alpha_s interpolation, with subgrid edge doubling and mC, mB, mZ included
        if not args.RESAMPLE_ALPHAS:
            alphas_qs = []
            for qs in qgrids:
                alphas_qs += qs
        else:
            print("Overriding original alpha_s grid with a new log Q sampling")
            alphas_qs = [qmin] + list(numpy.logspace(math.log10(qmin), math.log10(qmax), 100))[1:-1] + [qmax] # dense resampling in logQ between Qmin and Qmax
            print("Manual alpha_s Q grid: ", ", ".join("%0.2g" % q for q in alphas_qs))
        if len(qgrids) > 1:
            ## Add explicit sampling point at Z mass
            alphas_qs_offset = sorted( alphas_qs_offset + [MZ] )
            alphas_qs = sorted( alphas_qs + [MZ] )
        else:
            ## Add explicit sampling points at heavy quark and Z masses
            alphas_qs = sorted( alphas_qs + [lhapdf.getQMass(1, 4), lhapdf.getQMass(1, 5), MZ] )
        if args.VERBOSE:
            print("alpha_s Qs =", alphas_qs)

        ## Create the set-level metadata file corresponding to zeroth member.
        if member == 0:
            metapath = os.path.join(outdir, setname + '.info')
            f = open(metapath, "w")
            f.write("SetDesc: \"%s\"\n" % args.META_SETDESC.replace(r"\n","\n")) # Note line break insertion and quoting
            if args.META_LHAPDFID is not None:
                f.write("SetIndex: %d\n" % args.META_LHAPDFID)
            f.write("Authors: %s\n" % args.META_AUTHORS)
            f.write("Reference: %s\n" % args.META_REFERENCE)
            f.write("Format: lhagrid1\n")
            f.write("DataVersion: %d\n" % args.META_DATAVERSION)
            f.write("NumMembers: %d\n" % numMembers)
            if args.META_PARTICLEID:
                f.write("Particle: %d\n" % args.META_PARTICLEID)
            f.write("Flavors: [%s]\n" % ", ".join(str(pid) for pid in pids))
            f.write("OrderQCD: %d\n" % lhapdf.getOrderPDF())
            if args.FORCE_POSITIVE > 0:
                f.write("ForcePositive: %d\n" % args.FORCE_POSITIVE)
            f.write("FlavorScheme: %s\n" % ("fixed" if args.FIXED_NF else "variable"))
            # TODO: Yuck... this is unclear/potentially contradictory
            if args.NUM_FLAVS is not None:
                f.write("NumFlavors: %d\n" % args.NUM_FLAVS)
            elif lhapdf.getNf() > 0:
                f.write("NumFlavors: %d\n" % lhapdf.getNf())
            if args.META_ERRTYPE:
                f.write("ErrorType: %s\n" % args.META_ERRTYPE)
            if args.META_CONFLEVEL:
                f.write("ErrorConfLevel: %s\n" % args.META_CONFLEVEL)
            f.write("XMin: %g\n" % xmin)
            f.write("XMax: %g\n" % xmax)
            f.write("QMin: %g\n" % qmin)
            f.write("QMax: %g\n" % qmax)
            f.write("MZ: %g\n" % MZ)
            if args.META_NOTE:
                f.write("Note: \"%s\"\n" % args.META_NOTE)

            ## If each PDF member can have different alpha_s and quark masses, don't write them to the .info file
            if not args.DIFFASMASS:
                f.write("MUp: %g\n" % lhapdf.getQMass(1, 1))
                f.write("MDown: %g\n" % lhapdf.getQMass(1, 2))
                f.write("MStrange: %g\n" % lhapdf.getQMass(1, 3))
                f.write("MCharm: %g\n" % lhapdf.getQMass(1, 4))
                f.write("MBottom: %g\n" % lhapdf.getQMass(1, 5))
                f.write("MTop: %g\n" % lhapdf.getQMass(1, 6))
                f.write("AlphaS_MZ: %g\n" % lhapdf.alphasPDF(MZ))
                f.write("AlphaS_OrderQCD: %d\n" % lhapdf.getOrderAlphaS(1))
                if alphas_qs is not None:
                    f.write("AlphaS_Type: ipol\n")
                    f.write("AlphaS_Qs: [%s]\n" % ", ".join("%2.6e" % q for q in alphas_qs))
                    f.write("AlphaS_Vals: [%s]\n" % ", ".join("%2.6e" % lhapdf.alphasPDF(1, q) for q in (alphas_qs_offset if len(qgrids) > 1 and lhapdf.getOrderAlphaS(1) == 2 else alphas_qs)))
                else:
                    f.write("AlphaS_Type: analytic\n")
                if not args.NO_LAMBDA:
                    if lhapdf.getLam4(1) > 0:
                        f.write("AlphaS_Lambda4: %g\n" % lhapdf.getLam4(1))
                    if lhapdf.getLam5(1) > 0:
                        f.write("AlphaS_Lambda5: %g\n" % lhapdf.getLam5(1))
        f.close()

        ## Escape here if only writing the .info file
        if args.INFO_ONLY:
            break

        ## Work out the member file path and open it for writing
        memname = setname + ('_%04d.dat' % member)
        mempath = os.path.join(outdir, memname)
        f = open(mempath, "w")
        #f.write("PdfDesc: \n")
        f.write("PdfType: %s\n" % ("central" if member == 0 else args.META_PDFTYPE))
        f.write("Format: lhagrid1\n") # update here if grid format changes
        ## If different alpha_s and quark masses for each PDF member write to each .dat file.
        if args.DIFFASMASS:
            f.write("XMin: %g\n" % xmin)
            f.write("XMax: %g\n" % xmax)
            f.write("QMin: %g\n" % qmin)
            f.write("QMax: %g\n" % qmax)
            f.write("MZ: %g\n" % MZ)
            f.write("MUp: %g\n" % lhapdf.getQMass(1, 1))
            f.write("MDown: %g\n" % lhapdf.getQMass(1, 2))
            f.write("MStrange: %g\n" % lhapdf.getQMass(1, 3))
            f.write("MCharm: %g\n" % lhapdf.getQMass(1, 4))
            f.write("MBottom: %g\n" % lhapdf.getQMass(1, 5))
            f.write("MTop: %g\n" % lhapdf.getQMass(1, 6))
            f.write("AlphaS_MZ: %g\n" % lhapdf.alphasPDF(MZ))
            f.write("AlphaS_OrderQCD: %d\n" % lhapdf.getOrderAlphaS(1))
            if alphas_qs is not None:
                f.write("AlphaS_Type: ipol\n")
                f.write("AlphaS_Qs: [%s]\n" % ", ".join("%2.6e" % q for q in alphas_qs))
                f.write("AlphaS_Vals: [%s]\n" % ", ".join("%2.6e" % lhapdf.alphasPDF(1, q) for q in (alphas_qs_offset if len(qgrids) > 1 and lhapdf.getOrderAlphaS(1) == 2 else alphas_qs)))
            else:
                f.write("AlphaS_Type: analytic\n")
            if not args.NO_LAMBDA:
                if lhapdf.getLam4(1) > 0:
                    f.write("AlphaS_Lambda4: %g\n" % lhapdf.getLam4(1))
                if lhapdf.getLam5(1) > 0:
                    f.write("AlphaS_Lambda5: %g\n" % lhapdf.getLam5(1))
        f.write("---\n")

        ## Get the xf values for this PDF member in each Q subgrid
        for igrid, qs in enumerate(qgrids):
            # print qs
            xfs = []
            ## IMPORTANT! The grid lines are ordered by a nested loop of Qs inside xs, i.e. each ix stride is |iQ|
            for ix, x in enumerate(xs):
                for iq, q in enumerate(qs):
                    # if x != 1.0:
                    #     xfs.append([lhapdf.xfx(x, q, pid) for pid in lha5pids])
                    # else:
                    #     ## Force xf(x=1) = 0 for now, until ipol is improved
                    #     # TODO: Remove this when LHAPDF ipol knows about x=1
                    #     xfs.append([0.0 for pid in lha5pids])
                    ## Offset the sampling (but not the reported Q) a little on the low Q edges of later subgrids
                    if igrid > 0 and iq == 0:
                        q += 1e-10
                    ## Similarly for the high Q edges of subgrids other than the last
                    if igrid < len(qgrids)-1 and iq == len(qs)-1:
                        q -= 1e-10

                    #xf_vals = [lhapdf.xfx(x, q, pid) for pid in lha5pids]
                    xf_vals = []
                    for pid in pids:
                        ppid = 0 if pid == 21 else pid
                        if pid == 22:
                            xf = lhapdf.xfxphoton(x, q)[-1]
                        else:
                            if args.RESPHOTON:
                                xf = lhapdf.xfxp(x, q, 0.0, 0, ppid)
                            else:
                                xf = lhapdf.xfx(x, q, ppid)
                        xf_vals.append(xf)

                    xfs.append(xf_vals)
                    # if igrid == 1 and ix == 10:
                    #     print x, q, xf_vals[-1]

            ## Write x points
            line = " ".join("%2.6e" % x for x in xs)
            f.write(line + "\n")
            ## Write Q points
            line = " ".join("%2.6e" % q for q in qs)
            f.write(line + "\n")
            ## Write internal flavour list
            f.write(" ".join(str(pid) for pid in pids) + "\n")
            ## Write block of xf values
            for xfs_xq in xfs:
                line = ""
                for xf in xfs_xq:
                    if xf == 0.0: xf = 0.0 # remove occurences of negative zero
                    line += "%2.8e " % xf
                f.write(line.strip() + "\n")
            f.write("---\n")

        f.close()

        ## Escape here if only writing the .info file and first member
        if args.CENTRAL_ONLY:
            break
